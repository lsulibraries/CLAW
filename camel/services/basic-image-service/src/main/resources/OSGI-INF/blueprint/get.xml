<?xml version="1.0" encoding="UTF-8"?>
<blueprint xmlns="http://www.osgi.org/xmlns/blueprint/v1.0.0"
           xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
           xmlns:sparql="http://www.w3.org/2005/sparql-results#"
           xsi:schemaLocation="
           http://www.osgi.org/xmlns/blueprint/v1.0.0 http://www.osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd">

  <routeContext id="get" xmlns="http://camel.apache.org/schema/blueprint">

    <route id="getBasicImage">
      <description>Gets RDF for a basic image in Fedora using Drupal UUID</description>
      <from uri="direct:getBasicImage"/>
        <setProperty propertyName="uuid"><simple>${headers.uuid}</simple></setProperty>
        <to uri="direct:getObjectUri"/>
        <to uri="direct:getObjectOBJ"/>
    </route>

    <route id="getObjectUri">
      <description>Gets the Fedora URI for an object identified by Drupal UUID.  Creates the SPARQL query using a mustache template, uses javascript to url encode it, and sends it to the triplestore.</description>
      <from uri="direct:getObjectUri"/>
        <to uri="mustache:templates/getObjectUriSparql.mustache"/>
        <transform><javaScript>encodeURI(request.body)</javaScript></transform>
        <removeHeaders pattern="*"/>
        <setHeader headerName="CamelHttpMethod"><constant>POST</constant></setHeader>
        <setHeader headerName="CamelHttpQuery"><simple>format=xml&amp;query=${bodyAs(String)}</simple></setHeader>
        <setBody><simple>${null}</simple></setBody>
        <to uri="http:{{islandora.triplestore.baseurl}}"/>
        <to uri="direct:getObjectExtractUri"/>
    </route>

    <route id="getObjectExtractUri">
      <description>Uses XPath and Javascript to parse SPARQL query results and set collection URI as an exchange property</description>
      <from uri="direct:getObjectExtractUri"/>
        <doTry>
          <transform><xpath resultType="java.lang.String">//sparql:results/sparql:result[1]/sparql:binding[@name='s']/sparql:uri/text()</xpath></transform>
          <transform><javaScript>request.body.substr(request.body.indexOf('://') + 3)</javaScript></transform>
          <setProperty propertyName="uri"><simple>${body}</simple></setProperty>
          <doCatch>
            <exception>java.lang.Exception</exception>
            <to uri="direct:getObjectExtractUriError"/>
            <stop/>
          </doCatch>
        </doTry>
    </route>

    <route id="getObjectExtractUriError">
      <description>Returns a helpful message if there is an error extracting the Fedora URI from SPARQL results</description>
      <from uri="direct:getObjectExtractUriError"/>
        <setBody><simple>Failure extracting URI for object identified by ${property.uuid} from SPARQL results.  Are you certain the resource exists in Fedora?\n${exception.message}\n</simple></setBody>
        <removeHeaders pattern="*"/>
        <setHeader headerName="Content-Type"><constant>text/plain</constant></setHeader>
        <setHeader headerName="CamelHttpResponseCode"><constant>500</constant></setHeader>
    </route>

    <route id="getObjectOBJ">
      <from uri="direct:getObjectOBJ"/>
        <removeHeaders pattern="*"/>
        <setHeader headerName="CamelHttpMethod"><constant>GET</constant></setHeader>
        <recipientList><simple>http://${property.uri}/OBJ</simple></recipientList>
    </route>

    <route id="getCollectionUri">
      <description>Gets the Fedora URI for a collection identified by Drupal UUID.  Creates the SPARQL query using a mustache template, uses javascript to url encode it, and sends it to the triplestore.</description>
      <from uri="direct:getCollectionUri"/>
        <to uri="mustache:templates/getCollectionUriSparql.mustache"/>
        <transform><javaScript>encodeURI(request.body)</javaScript></transform>
        <removeHeaders pattern="*"/>
        <setHeader headerName="CamelHttpMethod"><constant>POST</constant></setHeader>
        <setHeader headerName="CamelHttpQuery"><simple>format=xml&amp;query=${bodyAs(String)}</simple></setHeader>
        <setBody><simple>${null}</simple></setBody>
        <to uri="http:{{islandora.triplestore.baseurl}}"/>
        <to uri="direct:getCollectionExtractUri"/>
    </route>

    <route id="getCollectionExtractUri">
      <description>Uses XPath and Javascript to parse SPARQL query results and set collection URI as an exchange property</description>
      <from uri="direct:getCollectionExtractUri"/>
        <doTry>
          <transform><xpath resultType="java.lang.String">//sparql:results/sparql:result[1]/sparql:binding[@name='s']/sparql:uri/text()</xpath></transform>
          <transform><javaScript>request.body.substr(request.body.indexOf('://') + 3)</javaScript></transform>
          <setProperty propertyName="uri"><simple>${body}</simple></setProperty>
          <doCatch>
            <exception>java.lang.Exception</exception>
            <to uri="direct:getCollectionExtractUriError"/>
            <stop/>
          </doCatch>
        </doTry>
    </route>

    <route id="getCollectionExtractUriError">
      <description>Returns a helpful message if there is an error extracting the Fedora URI from SPARQL results</description>
      <from uri="direct:getCollectionExtractUriError"/>
      <setBody><simple>Failure extracting URI for collection identified by ${property.uuid} from SPARQL results.  Are you certain the resource exists in Fedora?\n${exception.message}\n</simple></setBody>
      <removeHeaders pattern="*"/>
      <setHeader headerName="Content-Type"><constant>text/plain</constant></setHeader>
      <setHeader headerName="CamelHttpResponseCode"><constant>500</constant></setHeader>
    </route>
  </routeContext>

</blueprint>
